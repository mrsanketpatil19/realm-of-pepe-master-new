/* Autogenerated file. Do not edit manually. */

import { TableId } from "@latticexyz/utils";
import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    Counter: (() => {
      const tableId = new TableId("", "Counter");
      return defineComponent(
        world,
        {
          value: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    SFContractTable: (() => {
      const tableId = new TableId("", "SFContractTable");
      return defineComponent(
        world,
        {
          contractAddress: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    SFSuperTokenTable: (() => {
      const tableId = new TableId("", "SFSuperTokenTabl");
      return defineComponent(
        world,
        {
          superTokenAddress: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    SFResourceGeneratorTable: (() => {
      const tableId = new TableId("", "SFResourceGenera");
      return defineComponent(
        world,
        {
          resourceGeneratorAddress: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    SFStoreTable: (() => {
      const tableId = new TableId("", "SFStoreTable");
      return defineComponent(
        world,
        {
          storeAddress: RecsType.String,
          inResource: RecsType.String,
          outResource: RecsType.String,
          maxFlowRate: RecsType.BigInt,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    SFOpenStreamTable: (() => {
      const tableId = new TableId("", "SFOpenStreamTabl");
      return defineComponent(
        world,
        {
          flowRate: RecsType.BigInt,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Position: (() => {
      const tableId = new TableId("", "Position");
      return defineComponent(
        world,
        {
          x: RecsType.Number,
          y: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
  };
}
